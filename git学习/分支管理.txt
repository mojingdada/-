1.创建dev分支,然后切换分支
-- git checkout -b dev
2.查看当前分支
-- git branch ，git branch命令会列出所有分支，当前分支前面会标一个*号
3.我们在当前分支上对文件进行操作，不会影响到master的文件。
4.dev分支合并到master
-- git merge dev
5.合并完成，删除dev分支
-- git branch -d dev
6.解决冲突
分支修改，master也修改会导致两者无法合并，需要首先解决冲突，再提交，再合并。
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
用git log --graph命令可以看到分支合并图。
7.通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用Fast forward模式，Git就会在merge时
生成一个新的commit，这样，从分支历史上就可以看出分支信息。
-- git merge --no-ff -m "merge with no-ff" dev 禁用Fast forward模式
8.Bug分支
  在目前工作区仍有需要进行的工作没有做完，需要临时修改以一个bug，我们就要保留工作区现场。Git提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后
现场恢复后继续工作。
-- git stash
  查看工作现场
-- git stash list
恢复后，stash不删除：-- git stash apply，你需要用-- git stash drop删除
另一种方式是-- git stash pop，恢复的同时将stash内容也删除。
你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
-- git stash apply stash@{0}	
9.如果丢弃一个没有合并的分支，可以通过git branch -D<name>强行删除。
10.当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。
11.查看远程库信息
-- git remote 或者
更详细信息 
-- git remote -v
12.推送命令
-- git push origin master
-- git push origin dev
13.本地新建的分支如果不推送到远程，对其他人就是不可见的。
14.从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交。
15.在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致。
16.建立本地分支和远程分支的关联，使用git branch --set-upstream-to=origin/master master。
17.rebase操作可以把本地未push的分叉提交历史整理成直线；
   rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。
   rebase操作的特点：把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。
-- git rebase
-- git log --graph --pretty=oneline --abbrev-commit
   